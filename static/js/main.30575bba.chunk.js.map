{"version":3,"sources":["components/buttons/index.tsx","components/row/index.tsx","components/keyboard/index.tsx","index.tsx"],"names":["Button","React","memo","button","data-type","id","className","Row","row","map","btn","Keyboard","layout","onChange","autoFocusBtn","useEffect","autofoucsEl","document","getElementById","focus","onClick","useCallback","event","target","onFocus","console","log","setFocusToElement","el","preventScroll","goToUpOrDown","direction","isLast","isUp","activeElement","getBoundingClientRect","right","bottom","top","left","nextCoords","x","y","nextEl","elementFromPoint","dataset","type","nextRowEl","parentElement","previousElementSibling","nextElementSibling","lastChild","firstChild","onKeyDown","e","preventDefault","stopPropagation","keyCode","previousSibling","nextSibling","i","window","renderKeyBoard","props","ReactDOM","render"],"mappings":"6OAOaA,G,YAASC,IAAMC,MAAK,YAA6C,IAA1CC,EAAyC,EAAzCA,OAClC,OACE,wBAAQC,YAAU,eAAeC,GAAIF,EAAQG,UAAU,MAAvD,SAA8DH,QCDrDI,G,MAAMN,IAAMC,MAAK,YAA0C,IAAvCM,EAAsC,EAAtCA,IAC/B,OACE,qBAAKF,UAAU,MAAf,SACGE,EAAIC,KAAI,SAACC,GAAD,OAAS,cAACV,EAAD,CAAkBG,OAAQO,GAAbA,YCAxBC,G,MAAWV,IAAMC,MAAK,YAAqE,IAAlEU,EAAiE,EAAjEA,OAAQC,EAAyD,EAAzDA,SAAUC,EAA+C,EAA/CA,aACtDC,qBAAU,WACR,GAAID,EAAc,CAChB,IAAME,EAAcC,SAASC,eAAeJ,GAC5CE,GAAeA,EAAYG,WAE5B,CAACL,IACJ,IAAMM,EAAUC,uBAAY,SAACC,GAAkC,IACrDjB,EAAOiB,EAAMC,OAAblB,GACJA,GACEQ,GAAgC,oBAAbA,GACrBA,EAASR,KAGZ,CAACQ,IAEEW,EAAUH,uBAAY,SAACC,GAC3BG,QAAQC,IAAI,QAASJ,EAAMC,OAAOlB,MACjC,IAEGsB,EAAoB,SAACC,GACrBA,GACFA,EAAGT,MAAM,CAAEU,eAAe,KAIxBC,EAAeT,uBAAY,SAACU,EAAWC,GAC3C,IAAMC,EAAqB,OAAdF,EADyC,EAEjBd,SAASiB,cAAeC,wBAArDC,EAF8C,EAE9CA,MAAOC,EAFuC,EAEvCA,OAAQC,EAF+B,EAE/BA,IAAKC,EAF0B,EAE1BA,KACxBC,EAAuC,CAAEC,EAAG,EAAGC,EAAG,GAEpDF,EADEP,EACW,CAAEQ,EAAGF,EAAO,EAAGG,EAAGJ,EAAM,IAExB,CAAEG,EAAGL,EAAQ,EAAGM,EAAGL,EAAS,IAE3C,IAAMM,EAAS1B,SAAS2B,iBAAiBJ,EAAWC,EAAGD,EAAWE,GAElE,GAAIC,GAAkC,iBAAxBA,EAAOE,QAAQC,KAC3BnB,EAAkBgB,OACb,CACL,IAAMI,EAAYd,EAAOhB,SAASiB,cAAec,cAAeC,uBAAyBhC,SAASiB,cAAec,cAAeE,mBAC5HH,GAEApB,EADEK,EACgBe,EAAUI,UAEVJ,EAAUK,eAIjC,IAEGC,EAAYhC,uBAAY,SAACiC,GAC7BA,EAAEC,iBACFD,EAAEE,kBAFsC,IAGhCC,EAAYH,EAAZG,QACR,GAAIxC,SAASiB,cAAe,CAAC,IAAD,EACejB,SAASiB,cAA1CwB,EADkB,EAClBA,gBAAiBC,EADC,EACDA,YACzB,OAAOF,GACL,KAAK,GACH3B,EAAa,MAAO6B,GACpB,MACF,KAAK,GACH7B,EAAa,QAAS6B,GACtB,MACF,KAAK,GACCD,GACF/B,EAAkB+B,GAEpB,MACF,KAAK,GACCC,GACFhC,EAAkBgC,GAEpB,MACF,KAAK,GACC9C,GAAgC,oBAAbA,GACrBA,EAASI,SAASiB,cAAc7B,IAElC,MACF,QACE,WAGL,CAACyB,EAAcjB,IAClB,OACA,qBAAKwC,UAAWA,EAAW7B,QAASA,EAASJ,QAASA,EAAtD,SAAgER,EAAOH,KAAI,SAACD,EAAKoD,GAAN,OAAY,cAACrD,EAAD,CAAsBC,IAAKA,GAA3B,cAAiBoD,aC5E1GC,OAAOC,eARgB,SAASC,GAC9BC,IAASC,OACP,cAACtD,EAAD,eAAcoD,IACd9C,SAASC,eAAe6C,EAAM1D,Q","file":"static/js/main.30575bba.chunk.js","sourcesContent":["import React from 'react';\nimport './styles.css';\n\ninterface IProps {\n  button: string;\n}\n\nexport const Button = React.memo(({ button }: IProps): React.ReactElement => {\n  return (\n    <button data-type=\"keyboard-btn\" id={button} className=\"btn\">{button}</button>\n  )\n})","import React from 'react';\nimport { Button } from '../buttons';\nimport './styles.css';\n\ninterface IProps {\n  row: string[];\n}\n\nexport const Row = React.memo(({ row }: IProps): React.ReactElement => {\n  return (\n    <div className=\"row\">\n      {row.map((btn) => <Button key={btn} button={btn}/>)}\n    </div>\n  )\n})","import React, { useCallback, useEffect } from 'react';\nimport { Row } from '../row';\nimport { Layout } from '../../types';\nimport './styles.css';\n\ninterface IProps {\n  layout: Layout;\n  onChange?: (value: string) => void;\n  autoFocusBtn?: string;\n}\n\nexport const Keyboard = React.memo(({ layout, onChange, autoFocusBtn }: IProps): React.ReactElement => {\n  useEffect(() => {\n    if (autoFocusBtn) {\n      const autofoucsEl = document.getElementById(autoFocusBtn);\n      autofoucsEl && autofoucsEl.focus();\n    }\n  }, [autoFocusBtn]);\n  const onClick = useCallback((event: React.MouseEvent<any>) => {\n    const { id } = event.target as HTMLDivElement;\n    if (id) {\n      if (onChange && typeof onChange === 'function') {\n        onChange(id);\n      }\n    }\n  }, [onChange])\n\n  const onFocus = useCallback((event: React.FocusEvent<any>) => {\n    console.log('FOCUS', event.target.id)\n  }, [])\n\n  const setFocusToElement = (el: any) => {\n    if (el) {\n      el.focus({ preventScroll: true });\n    }\n  }\n\n  const goToUpOrDown = useCallback((direction, isLast) => {\n    const isUp = direction === 'UP';\n    const { right, bottom, top, left } = document.activeElement!.getBoundingClientRect();\n    let nextCoords: { x: number, y: number } = { x: 0, y: 0 };\n    if (isUp) {\n      nextCoords = { x: left + 5, y: top - 10 };\n    } else {\n      nextCoords = { x: right - 5, y: bottom + 10 };\n    }\n    const nextEl = document.elementFromPoint(nextCoords.x, nextCoords.y);\n    // @ts-ignore\n    if (nextEl && nextEl.dataset.type === 'keyboard-btn') {\n      setFocusToElement(nextEl);\n    } else {\n      const nextRowEl = isUp ? document.activeElement!.parentElement!.previousElementSibling : document.activeElement!.parentElement!.nextElementSibling;\n      if (nextRowEl) {\n        if (isLast) {\n          setFocusToElement(nextRowEl.lastChild);\n        } else {\n          setFocusToElement(nextRowEl.firstChild);\n        }\n      }\n    }\n  }, []);\n\n  const onKeyDown = useCallback((e: any) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const { keyCode } = e;\n    if (document.activeElement) {\n      const { previousSibling, nextSibling } = document.activeElement;\n      switch(keyCode) {\n        case 38: //UP\n          goToUpOrDown('UP', !nextSibling);\n          break;\n        case 40: //DOWN\n          goToUpOrDown('DOWN', !nextSibling);\n          break;\n        case 37: //LEFT\n          if (previousSibling) {\n            setFocusToElement(previousSibling);\n          }\n          break;\n        case 39: //RIGHT\n          if (nextSibling) {\n            setFocusToElement(nextSibling);\n          }\n          break;\n        case 13: //Enter\n          if (onChange && typeof onChange === 'function') {\n            onChange(document.activeElement.id);\n          }\n          break;\n        default:\n          return;\n      }\n    }\n  }, [goToUpOrDown, onChange])\n  return (\n  <div onKeyDown={onKeyDown} onFocus={onFocus} onClick={onClick}>{layout.map((row, i) => <Row key={`row-${i}`} row={row} />)}</div>\n  )\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Keyboard } from './components';\n\ninterface IRenderKeyBoard {\n  layout: string[][];\n  id: string;\n  onChange: (value: string) => void;\n  autoFocusBtn?: string;\n}\n\nconst RenderKeyBoard = function(props: IRenderKeyBoard) {\n  ReactDOM.render(\n    <Keyboard {...props} />,\n    document.getElementById(props.id)\n  );\n}\n\n// @ts-ignore\nwindow.renderKeyBoard = RenderKeyBoard;\n"],"sourceRoot":""}